{{- if eq .Values.environment "" }}
apiVersion: v1
kind: Namespace
metadata:
  name: prometheus
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: prometheus-agent
  namespace: prometheus
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: prometheus-role
rules:
# 2. Read node labels
- apiGroups: [ "" ]
  resources: [ "nodes" ]
  verbs: [ "get", "list", "watch" ]

# 3. Edit pod labels
- apiGroups: [ "" ]
  resources: [ "pods" ]
  verbs: [ "get", "list", "watch" ]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: prometheus-role-binding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: prometheus-role
subjects:
- kind: ServiceAccount
  name: prometheus-agent
  namespace: prometheus
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: config-volume
  namespace: prometheus
  labels:
    name: prometheus-config
data:
  prometheus.yml: |
    global:
      scrape_interval: 30s
      scrape_timeout: 10s

    scrape_configs:
      - job_name: 'fluent-bit-health'
        metrics_path: /probe
        params:
          module: [http_2xx]
        kubernetes_sd_configs:
          - role: pod
            namespaces:
              names:
                - fluent-bit

        relabel_configs:
          - source_labels: [__address__]
            target_label: __param_target
            regex: ([^:]+)(?::\d+)?
            replacement: http://${1}:2020/api/v1/health

          - target_label: __address__
            replacement: blackbox-exporter:9115

          - source_labels: [__param_target]
            target_label: instance

      - job_name: 'otel-health'
        metrics_path: /probe
        params:
          module: [http_2xx]
        kubernetes_sd_configs:
          - role: pod
            namespaces:
              names:
                - obs

        relabel_configs:
          - source_labels: [__address__]
            target_label: __param_target
            regex: ([^:]+)(?::\d+)?
            replacement: http://${1}:13133/healthz

          - target_label: __address__
            replacement: blackbox-exporter:9115

          - source_labels: [__param_target]
            target_label: instance

    remote_write:
      - name: mimir
        url: {{ .Values.observability.mimirEndpoint }}/api/v1/push  
        remote_timeout: 15s

        queue_config:
          capacity: 20000
          max_shards: 10
          min_shards: 1
          max_samples_per_send: 1000
          batch_send_deadline: 5s
          min_backoff: 100ms
          max_backoff: 5s
          retry_on_http_429: true
          sample_age_limit: 0s

        metadata_config:
          send: true
          send_interval: 2m
          max_samples_per_send: 500
---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus
  namespace: prometheus
  labels:
    app: prometheus
spec:
  replicas: 1
  selector:
    matchLabels:
      app: prometheus
  template:
    metadata:
      labels:
        app: prometheus
    spec:
      nodeSelector:
        kubernetes.io/arch: arm64
      serviceAccountName: prometheus-agent
      containers:
      - name: prometheus
        image: prom/prometheus:v3.5.0
        args:
        - "--config.file=/etc/prometheus/prometheus.yml"
        - "--storage.tsdb.path=/prometheus"
        - "--storage.tsdb.retention.time=1h"
        ports:
        - containerPort: 9090
        volumeMounts:
        - name: config-volume
          mountPath: /etc/prometheus
        resources:
          requests:
            memory: "256Mi"
            cpu: "200m"
          limits:
            memory: "512Mi"
            cpu: "500m"
      volumes:
      - name: config-volume
        configMap:
          name: config-volume
---
apiVersion: v1
kind: Service
metadata:
  name: prometheus
  namespace: prometheus
spec:
  selector:
    app: prometheus
  ports:
  - protocol: TCP
    port: 9090
    targetPort: 9090
  type: ClusterIP
---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: blackbox-exporter
  namespace: prometheus
spec:
  replicas: 1
  selector:
    matchLabels:
      app: blackbox-exporter
  template:
    metadata:
      labels:
        app: blackbox-exporter
    spec:
      nodeSelector:
        kubernetes.io/arch: arm64
      containers:
      - name: blackbox-exporter
        image: prom/blackbox-exporter:latest
        args:
        - --config.file=/etc/blackbox_exporter/blackbox.yml
        ports:
        - containerPort: 9115
        resources:
          requests:
            cpu: 50m
            memory: 64Mi
          limits:
            cpu: 200m
            memory: 256Mi
        volumeMounts:
        - name: config
          mountPath: /etc/blackbox_exporter
      volumes:
      - name: config
        configMap:
          name: blackbox-config
---
apiVersion: v1
kind: Service
metadata:
  name: blackbox-exporter
  namespace: prometheus
spec:
  selector:
    app: blackbox-exporter
  ports:
  - port: 9115
    targetPort: 9115
---

apiVersion: v1
kind: ConfigMap
metadata:
  name: blackbox-config
  namespace: prometheus
data:
  blackbox.yml: |
    modules:
      http_2xx:
        prober: http
        timeout: 5s
        http:
          valid_http_versions: ["HTTP/1.1", "HTTP/2.0"]
          valid_status_codes: [200]
          method: GET
          follow_redirects: true
{{- end }}