{{- if eq .Values.environment "" }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: opentelemetry-collector-config-deployment
  namespace: obs
data:
  otel-collector-config.yaml: |+
    extensions:
      health_check:
        endpoint: "0.0.0.0:13133"
        path: "/healthz"
        response_body:
          healthy: "I'm good"
          unhealthy: "I'm bad"

    receivers:
      prometheus/cert-manager:
        config:
          global:
            scrape_interval: 300s
            scrape_timeout: 60s
          scrape_configs:
            - job_name: 'cert-manager'
              static_configs:
                - targets: ['cert-manager.cert-manager.svc.cluster.local:9402']
              scrape_interval: 300s
              metrics_path: /metrics

      k8s_cluster:
        allocatable_types_to_report:
        - cpu
        - memory
        - storage
        - ephemeral-storage
        collection_interval: 300s
        node_conditions_to_report:
        - Ready
        - MemoryPressure
        - DiskPressure

    processors:
      attributes/cert_manager:
        actions:
          - key: cluster
            value: {{ .Values.accountIdentity }}
            action: insert

      resource/agent:
        attributes:
          - action: upsert
            key: service.namespace
            value: agent

      attributes/agent:
        actions:
          - key: service.namespace
            action: upsert
            value: agent
          - key: service.name
            action: upsert
            value: otel-collector
          - key: tenancy
            action: insert
            value: {{ .Values.accountIdentity }}

    exporters:
      prometheusremotewrite:
        endpoint: {{ .Values.observability.mimirEndpoint }}/api/v1/push
        tls:
          insecure: true
        resource_to_telemetry_conversion:
          enabled: true

    service:
      extensions: [health_check]
      telemetry:
        metrics:
          address: 0.0.0.0:8888
      pipelines:
        metrics:
          receivers: [prometheus/cert-manager, k8s_cluster]
          processors: [attributes/cert_manager, resource/agent, attributes/agent]
          exporters: [prometheusremotewrite]


---
apiVersion: v1
kind: Service
metadata:
  name: opentelemetry-collector-deployment
  namespace: obs
spec:
  ports:
  - name: otlp-grpc
    port: 4317
    protocol: TCP
    targetPort: 4317
  - name: otlp-http
    port: 4318
    protocol: TCP
    targetPort: 4318
  selector:
    app: opentelemetry-collector
---

apiVersion: v1
kind: ServiceAccount
metadata:
  name: opentelemetry-collector-deployment
  namespace: obs
---

apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: opentelemetry-collector-deployment
rules:
# 1. Access Kubernetes events
- apiGroups: [ "" ]
  resources: [ "events" ]
  verbs: [ "get", "list", "watch" ]

# 2. Read node labels
- apiGroups: [ "" ]
  resources: [ "nodes" ]
  verbs: [ "get", "list", "watch" ]

# 3. Edit pod labels
- apiGroups: [ "" ]
  resources: [ "pods" ]
  verbs: [ "get", "list", "watch" ]

# 4. Access kubelet cadvisor
- apiGroups: [ "" ]
  resources: [ "nodes/proxy" ]
  verbs: [ "get", "list" ]

- apiGroups: [ "" ]
  resources: [ "nodes/metrics", "nodes/stats" ]
  verbs: [ "get" ]

- apiGroups: [ "" ]
  resources: [ "namespaces", "services", "resourcequotas", "replicationcontrollers" ]
  verbs: [ "list", "watch", "get" ]
# Apps API group
- apiGroups: [ "apps" ]
  resources: [ "replicasets", "daemonsets", "statefulsets", "deployments" ]
  verbs: [ "list", "watch", "get" ]
# Batch API group
- apiGroups: [ "batch" ]
  resources: [ "jobs", "cronjobs" ]
  verbs: [ "list", "watch", "get" ]
# Autoscaling API group
- apiGroups: [ "autoscaling" ]
  resources: [ "horizontalpodautoscalers" ]
  verbs: [ "list", "watch", "get" ]

- apiGroups: [ "" ]
  resources: [ "persistentvolumeclaims", "persistentvolumes" ]
  verbs: [ "get", "list", "watch" ]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: opentelemetry-collector-deployment
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: opentelemetry-collector-deployment
subjects:
- kind: ServiceAccount
  name: opentelemetry-collector-deployment
  namespace: obs
---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: opentelemetry-collector-deployment
  namespace: obs
spec:
  replicas: 1
  selector:
    matchLabels:
      app: opentelemetry-collector
  template:
    metadata:
      labels:
        app: opentelemetry-collector
    spec:
      nodeSelector:
        kubernetes.io/arch: arm64
      serviceAccountName: opentelemetry-collector-deployment
      containers:
      - name: collector
        # [TODO] Update the image from Oracle Container Registry
        # image: ocir.ap-mumbai-1.oci.oraclecloud.com/bmbr2knaixlx/observability:otel-0.126.0-arm64
        image: otel/opentelemetry-collector-contrib:0.126.0
        args:
        - "--config=/conf/otel-collector-config.yaml"
        env:
        - name: K8S_NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        - name: K8S_POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: K8S_NAMESPACE_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        ports:
        - containerPort: 8888
        - containerPort: 4317
        - containerPort: 4318
        volumeMounts:
        - name: config
          mountPath: /conf
        resources:
          limits:
            cpu: 200m
            memory: 384Mi
          requests:
            cpu: 100m
            memory: 256Mi
      volumes:
      - name: config
        configMap:
          name: opentelemetry-collector-config-deployment
{{- end }}