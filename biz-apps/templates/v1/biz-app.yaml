{{- $ns := lookup "v1" "Namespace" "" (printf "%s-ns" .Values.namespace) }}
{{- if and (empty $ns) (eq .Values.environment "") }}
apiVersion: v1
kind: Namespace
metadata:
  name: "{{ .Values.namespace }}-ns"
  labels:
    {{ .Values.bizAppListeners.namespaceSelector | toYaml | nindent 4 }}
{{- end }}

---

apiVersion: v1
kind: ConfigMap
metadata:
  {{- if eq .Values.environment "" }}
  name: "{{ .Values.namespace }}-app-cm"
  {{- else }}
  name: "{{ .Values.environment }}-{{ .Values.namespace }}-app-cm"
  {{- end }}
  namespace: "{{ .Values.namespace }}-ns"
data:
  STAGE: {{ .Values.stage }}
  CHILD_ACCOUNT_ID: {{ .Values.accountIdentity | substr 0 (sub (len .Values.accountIdentity | int) 1 | int) }}

  # Domain configuration
  DOMAIN: {{ .Values.baseDomain }}
  TALLY_ON_CLOUD_BASE_URL: {{ .Values.baseDomain}}

  # CIS configuration
  CIS_BASE_URL: {{ .Values.cis.asyncResponse.baseUrl }}
  CIS_API_KEY: {{ .Values.cis.asyncResponse.apiKey }}
  TALLYNET_BASE_URL: {{ .Values.cis.tallyNet.baseUrl }}
  TALLY_NET_API_KEY: {{ .Values.cis.tallyNet.apiKey }}

  # OCI configuration
  PARENT_COMPARTMENT_ID: {{ .Values.compartments.parent.state }}
  OBS_DB_COMPARTMENT_ID: {{ .Values.compartments.obs.state }}
  STATE_DB_COMPARTMENT_ID: {{ .Values.compartments.parent.state }}
  COMPUTE_COMPARTMENT_ID: {{ index .Values "compartments" .Values.accountIdentity "compute" }}
  VOLUME_COMPARTMENT_ID: {{ index .Values "compartments" .Values.accountIdentity "volume" }}
  BUCKET_COMPARTMENT_ID: {{ index .Values "compartments" .Values.accountIdentity "bucket" }}
  NOTIFICATIONS_COMPARTMENT_ID: {{ .Values.compartments.parent.notifications }}
  CUSTOMER_TENANCY_ID: {{ .Values.compartments.parent.root }}
  CUSTOMER_TENANCY_NAMESPACE: {{ index .Values "ociNamespaces" (.Values.accountIdentity | substr 0 (sub (len .Values.accountIdentity | int) 1 | int)) }}
  DEVOPS_TENANCY_NAMESPACE: {{ .Values.ociNamespaces.parent }}
  PARENT_TENANCY_NAMESPACE: {{ .Values.ociNamespaces.parent }}

  # Parent Compartment IDs (also used to flow into Customer Pod through provisioning/add-user)
  PARENT_COMPARTMENT_OCID: {{ .Values.compartments.parent.state }}
  PARENT_AUDIT_COMPARTMENT_OCID: {{ .Values.compartments.parent.audit }}
  PARENT_BUCKET_COMPARTMENT_OCID: {{ .Values.compartments.parent.bucket }}
  PARENT_GITOPS_COMPARTMENT_OCID: {{ .Values.compartments.parent.gitops }}
  PARENT_NOTIFICATION_COMPARTMENT_OCID: {{ .Values.compartments.parent.notifications }}
  PARENT_REGISTRY_COMPARTMENT_OCID: {{ .Values.compartments.parent.registry }}
  PARENT_SECURITY_COMPARTMENT_OCID: {{ .Values.compartments.parent.security }}
  PARENT_STATE_COMPARTMENT_OCID: {{ .Values.compartments.parent.state }}

  # Cluster configuration
  {{- if hasSuffix "b" .Values.accountIdentity }}
  CLUSTER: blue
  {{- else }}
  CLUSTER: green
  {{- end }}
  ARGOCD_API_URL: "http://argocd-server.argocd.svc.cluster.local:80"
  ARGOCD_USERNAME: {{ .Values.argocd.username }}
  ARGOCD_PASSWORD: {{ .Values.argocd.password }}
  ARGOCD_REPO: {{ printf "/%s" (index (splitList "/" .Values.repoUrl.customers) 8) }}
  ARGOCD_BRANCH: {{ .Values.repoBranch.customers }}
  ARGOCD_DUMMY_APP_NAMESPACE: "argocd"
  POD_NUMBER: "{{ .Values.accountIdentity | substr 0 (sub (len .Values.accountIdentity | int) 1 | int) }}"
  {{- if eq .Values.environment "" }}
  ARGOCD_DUMMY_APP_NAME: "{{ .Values.namespace }}"
  NATS_SERVER_URL: "nats://nats.nats-ns.svc.cluster.local:4222"
  {{- else }}
  ARGOCD_DUMMY_APP_NAME: "{{ .Values.environment }}-{{ .Values.namespace }}"
  NATS_SERVER_URL: "nats://{{ .Values.environment }}-nats.{{ .Values.environment }}-nats-ns.svc.cluster.local:4222"
  {{- end }}

  # Miscellaneous
  MAX_VM_PER_TENANCY: "1000"
  TALLY_PARTNER_ID: "{{ .Values.cis.partnerId }}"
  KEYS_BUCKET: "{{ .Values.publicKeysBucket }}"

  # Logging configuration
  {{- if eq .Values.stage "dev" }}
  LOG_TO_FILE: "true"
  {{- else }}
  LOG_TO_FILE: "false"
  {{- end }}
  IS_JSON_LOGGING: "true"
  USE_OCI_CONFIG: "false"
  LOG_PATH: "/var/log/app.log"

  # SNS topics
  SNS_DEFAULT_TOPIC_OCID: {{ .Values.snsTopics.defaultTopic }}
  SNS_AUTO_DELETE_TOPIC_OCID: {{ .Values.snsTopics.autoDeleteBackupTopic }}
  SNS_DATA_SECURITY_OCID: {{ .Values.snsTopics.dataSecurityTopic }}
  SNS_UUID_NOT_FOUND_OCID: {{ .Values.snsTopics.uuidNotFoundTopic }}

  # Security configuration
  VAULT_SECRET_OCID: {{ .Values.secrets.salt }}

  # VDI application configuration
  LICENSE_SERVER_URL: {{ .Values.neverinstall.licenseServer.url }}
  LICENSE_SERVER_API_KEY: {{ .Values.neverinstall.licenseServer.apiKey }}
  NI_BASE_URL: {{ .Values.neverinstall.uidGenerator.url }}
  NI_API_KEY: {{ .Values.neverinstall.uidGenerator.apiKey }}

  # Gitops
  ARGOCD_REPO_URL: {{ .Values.repoUrl.customers }}
  ARGOCD_REPO_BRANCH: {{ .Values.repoBranch.customers }}
  GIT_USERNAME_SECRET_NAME: "gitops.manage-username"
  GIT_PASSWORD_SECRET_NAME: "gitops.manage-token"
  GIT_SECRETS_VAULT_OCID: {{ .Values.repoCredsVault }}
  OCI_RESOURCE_PRINCIPAL_VERSION: "2.2"
  OCI_RESOURCE_PRINCIPAL_REGION: {{ .Values.region }}

  INFRA_AO_CRUD_API_URL: http://bl-infra-ao-crud-envoy-app-svc.bl-infra-ao-crud-ns.svc.cluster.local:80
  DB_A_R_API_URL: http://bl-db-a-r-envoy-app-svc.bl-db-a-r-ns.svc.cluster.local:80
  DB_A_CRU_API_URL: http://bl-db-a-cru-envoy-app-svc.bl-db-a-cru-ns.svc.cluster.local:80
  DB_O_CRU_API_URL: http://bl-db-o-cru-envoy-app-svc.bl-db-o-cru-ns.svc.cluster.local:80
  DB_O_CRUD_API_URL: http://bl-db-o-crud-envoy-app-svc.bl-db-o-crud-ns.svc.cluster.local:80

  AUTH_ENDPOINT: http://vdi-auth-svc.bl-db-o-cru-ns.svc.cluster.local:8000/api/v1/auth/connect
  VALIDATE_ENDPOINT: http://vdi-auth-svc.bl-db-o-cru-ns.svc.cluster.local:8000/api/v1/auth/validate

  AWS_CALL_BACK_API: "{{ .Values.migration.awsCallbackUrl }}"
  MIGRATION_SECRET_OCID: "{{ .Values.migration.secretOcid }}"

---

apiVersion: v1
kind: ServiceAccount
metadata:
  {{- if eq .Values.environment "" }}
  name: "{{ .Values.namespace }}-sa"
  {{- else }}
  name: "{{ .Values.environment }}-{{ .Values.namespace }}-sa"
  {{- end }}
  namespace: "{{ .Values.namespace }}-ns"

---

{{- $role := dict }}
{{- if hasKey .Values.clusterRoles .Values.namespace }}
  {{- $role = index .Values.clusterRoles .Values.namespace }}
{{- else if hasKey .Values.clusterRoles "common" }}
  {{- $role = .Values.clusterRoles.common }}
{{- end }}
{{- if not (empty $role) }}
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  {{- if eq .Values.environment "" }}
  name: "{{ .Values.namespace }}-cr"
  {{- else }}
  name: "{{ .Values.environment }}-{{ .Values.namespace }}-cr"
  {{- end }}
rules:
{{ $role | toYaml }}

---

apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  {{- if eq .Values.environment "" }}
  name: "{{ .Values.namespace }}-crb"
  {{- else }}
  name: "{{ .Values.environment }}-{{ .Values.namespace }}-crb"
  {{- end }}
subjects:
- kind: ServiceAccount
  {{- if eq .Values.environment "" }}
  name: "{{ .Values.namespace }}-sa"
  {{- else }}
  name: "{{ .Values.environment }}-{{ .Values.namespace }}-sa"
  {{- end }}
  namespace: "{{ .Values.namespace }}-ns"
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  {{- if eq .Values.environment "" }}
  name: "{{ .Values.namespace }}-cr"
  {{- else }}
  name: "{{ .Values.environment }}-{{ .Values.namespace }}-cr"
  {{- end }}

{{- end }}

---

{{- $es := lookup "v1" "ExternalSecret" (printf "%s-ns" .Values.namespace) (printf "%s-image-pull-creds-es" .Values.namespace) }}
{{- if and (empty $es) (eq .Values.environment "") }}
apiVersion: external-secrets.io/v1
kind: ExternalSecret
metadata:
  name: "{{ .Values.namespace }}-image-pull-creds-es"
  namespace: "{{ .Values.namespace }}-ns"
spec:
  refreshInterval: "1h"
  secretStoreRef:
    name: {{ .Values.sharedSecretStore.name }}
    kind: ClusterSecretStore
  target:
    name: "{{ .Values.namespace }}-ocir-secret"
    template:
      type: kubernetes.io/dockerconfigjson
  data:
    - remoteRef:
        key: "{{ .Values.sharedSecretStore.sharedNamespace }}-ocir-secret"
        property: .dockerconfigjson
      secretKey: .dockerconfigjson
{{- end }}

---

{{- $es := lookup "v1" "ExternalSecret" (printf "%s-ns" .Values.namespace) (printf "%s-%s-es" .Values.namespace .Values.tls.basename) }}
{{- if and (empty $es) (eq .Values.environment "") }}
apiVersion: external-secrets.io/v1
kind: ExternalSecret
metadata:
  name: "{{ .Values.namespace }}-{{ .Values.tls.basename }}-es"
  namespace: "{{ .Values.namespace }}-ns"
spec:
  refreshInterval: "1h"
  secretStoreRef:
    name: {{ .Values.sharedSecretStore.name }}
    kind: ClusterSecretStore
  target:
    name: "{{ .Values.namespace }}-{{ .Values.tls.basename }}-secret"
    template:
      type: kubernetes.io/tls
  data:
    - secretKey: tls.crt
      remoteRef:
        key: "{{ .Values.tls.basename }}-secret"
        property: tls.crt
    - secretKey: tls.key
      remoteRef:
        key: "{{ .Values.tls.basename }}-secret"
        property: tls.key
{{- end }}

{{- $apps_to_deploy := list }}
{{- $apps := .Values.apps | substr 1 (sub (len .Values.apps | int) 1 | int) }}
{{- $apps := regexFindAll "map\\[[a-zA-Z0-9\\s:-]*\\]" $apps -1 }}
{{- range $apps }}
{{- $details := . | trimPrefix "map[" | trimSuffix "]" | splitList " " }}
{{- $temp := dict }}
{{- range $details }}
{{- $kv := split ":" . }}
{{- $_ := set $temp (index $kv "_0") (index $kv "_1") }}
{{- end }}
{{- $apps_to_deploy = append $apps_to_deploy $temp }}
{{- end }}

{{- range $apps_to_deploy }}
---

apiVersion: v1
kind: ConfigMap
metadata:
  {{- if eq $.Values.environment "" }}
  name: "{{ $.Values.namespace }}-{{ .type }}-{{ .name }}-cm"
  {{- else }}
  name: "{{ $.Values.environment }}-{{ $.Values.namespace }}-{{ .type }}-{{ .name }}-cm"
  {{- end }}
  namespace: "{{ $.Values.namespace }}-ns"
data:
  {{- if eq .type "envoy" }}
  {{- $.Values.envoy.common.env | toYaml | nindent 2 }}
  {{- else if eq .type "nats" }}
  {{- $.Values.nats.common.env | toYaml | nindent 2 }}
  {{- index $.Values "nats" $.Values.namespace .name "env" | toYaml | nindent 2 }}
  {{- else if eq .type "cron" }}
  {{- index $.Values "cron" $.Values.namespace .name "env" | toYaml | nindent 2 }}
  {{- end }}

---

{{- if eq .type "envoy" "nats" }}
apiVersion: apps/v1
kind: Deployment
metadata:
  {{- if eq $.Values.environment "" }}
  name: "{{ $.Values.namespace }}-{{ .type }}-{{ .name }}-dpy"
  {{- else }}
  name: "{{ $.Values.environment }}-{{ $.Values.namespace }}-{{ .type }}-{{ .name }}-dpy"
  {{- end }}
  namespace: "{{ $.Values.namespace }}-ns"
spec:
  replicas: 5
  selector:
    matchLabels:
      {{- if eq $.Values.environment "" }}
      app: "{{ $.Values.namespace }}-{{ .type }}-{{ .name }}-pod"
      {{- else }}
      app: "{{ $.Values.environment }}-{{ $.Values.namespace }}-{{ .type }}-{{ .name }}-pod"
      {{- end }}
  template:
    metadata:
      labels:
        {{- if eq $.Values.environment "" }}
        app: "{{ $.Values.namespace }}-{{ .type }}-{{ .name }}-pod"
        {{- else }}
        app: "{{ $.Values.environment }}-{{ $.Values.namespace }}-{{ .type }}-{{ .name }}-pod"
        {{- end }}
    spec:
      containers:
      - name: {{ .name }}
        image: {{ $.Values.containerRegistry }}/{{ $.Values.ociNamespaces.parent }}/{{ $.Values | toYaml | fromYaml | dig .type $.Values.namespace .name "image" $.Values.images.bizLogic }}
        {{- if eq .type "envoy" }}
        ports:
          {{- $.Values.bizAppPorts | toYaml | nindent 10 }}
        {{- end }}
        envFrom:
        {{- if eq $.Values.environment "" }}
        - configMapRef:
            name: "{{ $.Values.namespace }}-{{ .type }}-{{ .name }}-cm"
        - configMapRef:
            name: "{{ $.Values.namespace }}-app-cm"
        {{- else }}
        - configMapRef:
            name: "{{ $.Values.environment }}-{{ $.Values.namespace }}-{{ .type }}-{{ .name }}-cm"
        - configMapRef:
            name: "{{ $.Values.environment }}-{{ $.Values.namespace }}-app-cm"
        {{- end }}
        resources:
        {{- if hasKey (index $.Values .type $.Values.namespace .name) "resources" }}
          {{- index $.Values .type $.Values.namespace .name "resources" | toYaml | nindent 10 }}
        {{- else }}
          {{- $.Values.defaultResources | toYaml | nindent 10 }}
        {{- end }}
        {{- if ($.Values | toYaml | fromYaml | dig .type $.Values.namespace .name "tlsMount" $.Values.defaultTlsMount) }}
        volumeMounts:
        - mountPath: /etc/xrdp/cert.pem
          name: rdp-signing-cert
          subPath: tls.crt
          readOnly: true
        - mountPath: /etc/xrdp/key.pem
          name: rdp-signing-cert
          subPath: tls.key
          readOnly: true
        {{- end }}
      imagePullSecrets:
      - name: "{{ $.Values.namespace }}-ocir-secret"
      nodeSelector:
        {{- $.Values.nodeSelector | toYaml | nindent 8 }}
      {{- if eq $.Values.environment "" }}
      serviceAccountName: "{{ $.Values.namespace }}-sa"
      {{- else }}
      serviceAccountName: "{{ $.Values.environment }}-{{ $.Values.namespace }}-sa"
      {{- end }}
      topologySpreadConstraints:
      - maxSkew: 1
        topologyKey: kubernetes.io/hostname
        whenUnsatisfiable: ScheduleAnyway
        labelSelector:
          matchLabels:
            {{- if eq $.Values.environment "" }}
            app: "{{ $.Values.namespace }}-{{ .type }}-{{ .name }}-pod"
            {{- else }}
            app: "{{ $.Values.environment }}-{{ $.Values.namespace }}-{{ .type }}-{{ .name }}-pod"
            {{- end }}
      {{- if ($.Values | toYaml | fromYaml | dig .type $.Values.namespace .name "tlsMount" $.Values.defaultTlsMount) }}
      volumes:
      - name: rdp-signing-cert
        secret:
          secretName: "{{ $.Values.namespace }}-{{ $.Values.tls.basename }}-secret"
      {{- end }}
{{- end }}

---

{{- if eq .type "cron" }}
apiVersion: batch/v1
kind: CronJob
metadata:
  {{- if eq $.Values.environment "" }}
  name: "{{ $.Values.namespace }}-{{ .type }}-{{ .name }}-job"
  {{- else }}
  name: "{{ $.Values.environment }}-{{ $.Values.namespace }}-{{ .type }}-{{ .name }}-job"
  {{- end }}
  namespace: "{{ $.Values.namespace }}-ns"
spec:
  schedule: '{{- index $.Values "cron" $.Values.namespace .name "schedule" }}'
  jobTemplate:
    spec:
      template:
        metadata:
          labels:
            {{- if eq $.Values.environment "" }}
            app: "{{ $.Values.namespace }}-{{ .type }}-{{ .name }}-pod"
            {{- else }}
            app: "{{ $.Values.environment }}-{{ $.Values.namespace }}-{{ .type }}-{{ .name }}-pod"
            {{- end }}
        spec:
          containers:
          - name: {{ .name }}
            image: {{ $.Values.containerRegistry }}/{{ $.Values.ociNamespaces.parent }}/{{ $.Values | toYaml | fromYaml | dig .type $.Values.namespace .name "image" $.Values.images.bizLogic }}
            imagePullPolicy: Always
            envFrom:
            {{- if eq $.Values.environment "" }}
            - configMapRef:
                name: "{{ $.Values.namespace }}-{{ .type }}-{{ .name }}-cm"
            - configMapRef:
                name: "{{ $.Values.namespace }}-app-cm"
            {{- else }}
            - configMapRef:
                name: "{{ $.Values.environment }}-{{ $.Values.namespace }}-{{ .type }}-{{ .name }}-cm"
            - configMapRef:
                name: "{{ $.Values.environment }}-{{ $.Values.namespace }}-app-cm"
            {{- end }}
            resources:
            {{- if hasKey (index $.Values .type $.Values.namespace .name) "resources" }}
              {{- index $.Values .type $.Values.namespace .name "resources" | toYaml | nindent 14 }}
            {{- else }}
              {{ $.Values.defaultResources | toYaml | nindent 14 }}
            {{- end }}
          imagePullSecrets:
          - name: "{{ $.Values.namespace }}-ocir-secret"
          nodeSelector:
            {{- $.Values.nodeSelector | toYaml | nindent 12 }}
          restartPolicy: OnFailure
          topologySpreadConstraints:
          - maxSkew: 1
            topologyKey: kubernetes.io/hostname
            whenUnsatisfiable: DoNotSchedule
            labelSelector:
              matchLabels:
                {{- if eq $.Values.environment "" }}
                app: "{{ $.Values.namespace }}-{{ .type }}-{{ .name }}-pod"
                {{- else }}
                app: "{{ $.Values.environment }}-{{ $.Values.namespace }}-{{ .type }}-{{ .name }}-pod"
                {{- end }}
{{- end }}

---    

{{- if eq .type "envoy" }}
apiVersion: v1
kind: Service
metadata:
  {{- if eq $.Values.environment "" }}
  name: "{{ $.Values.namespace }}-{{ .type }}-{{ .name }}-svc"
  {{- else }}
  name: "{{ $.Values.environment }}-{{ $.Values.namespace }}-{{ .type }}-{{ .name }}-svc"
  {{- end }}
  namespace: "{{ $.Values.namespace }}-ns"
  {{- if eq ($.Values | toYaml | fromYaml | dig .type $.Values.namespace .name "serviceType" "ClusterIP") "LoadBalancer" }}
  annotations:
    oci.oraclecloud.com/load-balancer-type: "{{ $.Values.internalLoadBalancer.type }}"
    oci-network-load-balancer.oraclecloud.com/subnet: "{{ $.Values.internalLoadBalancer.subnet }}"
    oci-network-load-balancer.oraclecloud.com/oci-network-security-groups: "{{ $.Values.internalLoadBalancer.securityGroup }}"
    oci-network-load-balancer.oraclecloud.com/internal: "true"
    oci-network-load-balancer.oraclecloud.com/node-label-selector: "{{ (keys $.Values.nodeSelector | first) }}={{ (values $.Values.nodeSelector | first) }}"
  {{- end }}
spec:
  ports:
    - name: http
      port: {{ $.Values.bizSvcPort }}
      targetPort: {{ index ($.Values.bizAppPorts | first) "containerPort" }}
  selector:
    {{- if eq $.Values.environment "" }}
    app: "{{ $.Values.namespace }}-{{ .type }}-{{ .name }}-pod"
    {{- else }}
    app: "{{ $.Values.environment }}-{{ $.Values.namespace }}-{{ .type }}-{{ .name }}-pod"
    {{- end }}
  type: {{ $.Values | toYaml | fromYaml | dig .type $.Values.namespace .name "serviceType" "ClusterIP" }} 

---

{{- if hasKey (index $.Values .type $.Values.namespace .name "routes") "cis" }}
apiVersion: gateway.networking.k8s.io/v1
kind: HTTPRoute
metadata:
  {{- if eq $.Values.environment "" }}
  name: "{{ $.Values.namespace }}-{{ .type }}-{{ .name }}-cis-route"
  {{- else }}
  name: "{{ $.Values.environment }}-{{ $.Values.namespace }}-{{ .type }}-{{ .name }}-cis-route"
  {{- end }}
  namespace: "{{ $.Values.namespace }}-ns"
spec:
  parentRefs:
  - group: gateway.networking.k8s.io
    kind: Gateway
    {{- if eq $.Values.environment "" }}
    name: "{{ $.Values.envoyController.basename }}-gateway"
    {{- else }}
    name: "{{ $.Values.environment }}-{{ $.Values.envoyController.basename }}-gateway"
    {{- end }}
    namespace: "{{ $.Values.envoyController.basename }}-ns"
  rules:
  - matches:
    {{- range (index $.Values .type $.Values.namespace .name "routes" "cis") }}
    - path: {{ . | toJson }}
    {{- end }}
    {{- if hasKey ($.Values | toYaml | fromYaml | dig .type $.Values.namespace .name "timeouts" dict) "cis" }}
    timeouts:
      request: {{ index $.Values .type $.Values.namespace .name "timeouts" "cis" }}
    {{- end }}
    backendRefs:
    - group: ''
      kind: Service
      {{- if eq $.Values.environment "" }}
      name: "{{ $.Values.namespace }}-{{ .type }}-{{ .name }}-svc"
      {{- else }}
      name: "{{ $.Values.environment }}-{{ $.Values.namespace }}-{{ .type }}-{{ .name }}-svc"
      {{- end }}
      port: {{ $.Values.bizSvcPort }}

---

apiVersion: gateway.envoyproxy.io/v1alpha1
kind: SecurityPolicy
metadata:
  {{- if eq $.Values.environment "" }}
  name: "{{ $.Values.namespace }}-{{ .type }}-{{ .name }}-cis-sp"
  {{- else }}
  name: "{{ $.Values.environment }}-{{ $.Values.namespace }}-{{ .type }}-{{ .name }}-cis-sp"
  {{- end }}
  namespace: "{{ $.Values.namespace }}-ns"
spec:
  targetRefs:
  - group: gateway.networking.k8s.io
    kind: HTTPRoute
    {{- if eq $.Values.environment "" }}
    name: "{{ $.Values.namespace }}-{{ .type }}-{{ .name }}-cis-route"
    {{- else }}
    name: "{{ $.Values.environment }}-{{ $.Values.namespace }}-{{ .type }}-{{ .name }}-cis-route"
    {{- end }}
  authorization:
    defaultAction: Deny
    rules:
    - action: Allow
      principal:
        clientCIDRs:
        - {{ $.Values.cis.ip }}
{{- end }}

---

{{- if hasKey (index $.Values .type $.Values.namespace .name "routes") "ssp" }}
apiVersion: gateway.networking.k8s.io/v1
kind: HTTPRoute
metadata:
  {{- if eq $.Values.environment "" }}
  name: "{{ $.Values.namespace }}-{{ .type }}-{{ .name }}-ssp-route"
  {{- else }}
  name: "{{ $.Values.environment }}-{{ $.Values.namespace }}-{{ .type }}-{{ .name }}-ssp-route"
  {{- end }}
  namespace: "{{ $.Values.namespace }}-ns"
spec:
  parentRefs:
  - group: gateway.networking.k8s.io
    kind: Gateway
    {{- if eq $.Values.environment "" }}
    name: "{{ $.Values.envoyController.basename }}-gateway"
    {{- else }}
    name: "{{ $.Values.environment }}-{{ $.Values.envoyController.basename }}-gateway"
    {{- end }}
    namespace: "{{ $.Values.envoyController.basename }}-ns"
  rules:
  - matches:
    {{- range (index $.Values .type $.Values.namespace .name "routes" "ssp") }}
    - path: {{ . | toJson }}
    {{- end }}
    {{- if hasKey ($.Values | toYaml | fromYaml | dig .type $.Values.namespace .name "timeouts" dict) "ssp" }}
    timeouts:
      request: {{ index $.Values .type $.Values.namespace .name "timeouts" "ssp" }}
    {{- end }}
    backendRefs:
    - group: ''
      kind: Service
      {{- if eq $.Values.environment "" }}
      name: "{{ $.Values.namespace }}-{{ .type }}-{{ .name }}-svc"
      {{- else }}
      name: "{{ $.Values.environment }}-{{ $.Values.namespace }}-{{ .type }}-{{ .name }}-svc"
      {{- end }}
      port: {{ $.Values.bizSvcPort }}

---

apiVersion: gateway.envoyproxy.io/v1alpha1
kind: SecurityPolicy
metadata:
  {{- if eq $.Values.environment "" }}
  name: "{{ $.Values.namespace }}-{{ .type }}-{{ .name }}-ssp-sp"
  {{- else }}
  name: "{{ $.Values.environment }}-{{ $.Values.namespace }}-{{ .type }}-{{ .name }}-ssp-sp"
  {{- end }}
  namespace: "{{ $.Values.namespace }}-ns"
spec:
  targetRefs:
    - group: gateway.networking.k8s.io
      kind: HTTPRoute
      {{- if eq $.Values.environment "" }}
      name: "{{ $.Values.namespace }}-{{ .type }}-{{ .name }}-ssp-route"
      {{- else }}
      name: "{{ $.Values.environment }}-{{ $.Values.namespace }}-{{ .type }}-{{ .name }}-ssp-route"
      {{- end }}
  cors:
    allowOrigins:
    - "https://{{ $.Values.baseDomain }}"
    allowMethods:
    - GET
    - POST
    - PUT
    - DELETE
    allowHeaders:
    - Authorization
    - Content-Type
{{- end }}
{{- end }}

---

{{- if eq .type "envoy" "nats" }}
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  {{- if eq $.Values.environment "" }}
  name: "{{ $.Values.namespace }}-{{ .type }}-{{ .name }}-hpa"
  {{- else }}
  name: "{{ $.Values.environment }}-{{ $.Values.namespace }}-{{ .type }}-{{ .name }}-hpa"
  {{- end }}
  namespace: "{{ $.Values.namespace }}-ns"
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    {{- if eq $.Values.environment "" }}
    name: "{{ $.Values.namespace }}-{{ .type }}-{{ .name }}-dpy"
    {{- else }}
    name: "{{ $.Values.environment }}-{{ $.Values.namespace }}-{{ .type }}-{{ .name }}-dpy"
    {{- end }}
  {{- if hasKey ($.Values | toYaml | fromYaml | dig .type $.Values.namespace .name "hpaConfig" dict) "minReplicas" }}
  minReplicas: {{ index $.Values .type $.Values.namespace .name "hpaConfig" "minReplicas" }}
  {{- else }}
  minReplicas: {{ $.Values.defaultHpaConfig.minReplicas }}
  {{- end }}
  {{- if hasKey ($.Values | toYaml | fromYaml | dig .type $.Values.namespace .name "hpaConfig" dict) "maxReplicas" }}
  maxReplicas: {{ index $.Values .type $.Values.namespace .name "hpaConfig" "maxReplicas" }}
  {{- else }}
  maxReplicas: {{ $.Values.defaultHpaConfig.maxReplicas }}
  {{- end }}
  behavior:
    {{- if hasKey ($.Values | toYaml | fromYaml | dig .type $.Values.namespace .name "hpaConfig" dict) "behavior" }}
    {{- index $.Values .type $.Values.namespace .name "hpaConfig" "behavior" | toYaml | nindent 4 }}
    {{- else }}
    {{ $.Values.defaultHpaConfig.behavior | toYaml | nindent 4 }}
    {{- end }}
  metrics:
  - resource:
      name: cpu
      target:
        {{- if hasKey ($.Values | toYaml | fromYaml | dig .type $.Values.namespace .name "hpaConfig" dict) "cpuUtilization" }}
        averageUtilization: {{ index $.Values .type $.Values.namespace .name "hpaConfig" "cpuUtilization" }}
        {{- else }}
        averageUtilization: {{ $.Values.defaultHpaConfig.cpuUtilization }}
        {{- end }}
        type: Utilization
    type: Resource
  - resource:
      name: memory
      target:
        {{- if hasKey ($.Values | toYaml | fromYaml | dig .type $.Values.namespace .name "hpaConfig" dict) "memoryUtilization" }}
        averageUtilization: {{ index $.Values .type $.Values.namespace .name "hpaConfig" "memoryUtilization" }}
        {{- else }}
        averageUtilization: {{ $.Values.defaultHpaConfig.memoryUtilization }}
        {{- end }}
        type: Utilization
    type: Resource
{{- end }}

{{- end }}
